CCS PCM C Compiler, Version 4.114, 93483988               17-mar-14 19:08

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\LCD Nokia 3310\main.lst

               ROM used: 817 words (40%)
                         Largest free fragment is 1231
               RAM used: 13 (6%) at main() level
                         19 (8%) worst case
               Stack:    4 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   30E
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
026B:  MOVLW  27
026C:  MOVWF  04
026D:  BCF    03.7
026E:  MOVF   00,W
026F:  BTFSC  03.2
0270:  GOTO   27F
0271:  MOVLW  01
0272:  MOVWF  78
0273:  CLRF   77
0274:  DECFSZ 77,F
0275:  GOTO   274
0276:  DECFSZ 78,F
0277:  GOTO   273
0278:  MOVLW  4A
0279:  MOVWF  77
027A:  DECFSZ 77,F
027B:  GOTO   27A
027C:  GOTO   27D
027D:  DECFSZ 00,F
027E:  GOTO   271
.................... #fuses XT, PUT, NOWDT, NOBROWNOUT, NOLVP 
.................... #include "drive3310.c" 
.................... #define nok_sclk     pin_b5 
.................... #define nok_sda      pin_b6 
.................... #define nok_dc       pin_b7 
.................... #define nok_cs       pin_b0 
.................... #define nok_res      pin_b1 
....................  
.................... char char_row,charsel,charpos,chardata;       // for nokia_3310 lcd 
.................... int16 ddram; 
.................... //char plot_value; 
....................  
.................... BYTE const TABLE5[240]=            {0x00,0x00,0x00,0x00,0x00,   // 20 space          ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes 
....................   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................   0x3e,0x41,0x41,0x41,0x3e    // 4f O 
.................... };    
....................  
....................  
.................... BYTE const TABLE6[240]=            {0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................   0x00,0x01,0x02,0x04,0x00,   // 60 
....................   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................   0x78,0x46,0x41,0x46,0x78    // 7f 
.................... }; 
....................  
.................... // 
.................... void    nokia_init(void); 
.................... void    nokia_write_command(char bytefornokia_command); 
.................... void    nokia_write_data(char bytefornokia_data); 
.................... void    nokia_write_dorc(char bytefornokia); 
.................... void    nokia_gotoxy(int8 xnokia, int8 ynokia); 
.................... void    nokia_erase_y(int8 ynokia); 
.................... void    nokia_erase_x(int8 xnokia); 
.................... void    nokia_printchar(int8 cvar); 
.................... void    nokia_clean_ddram(void); 
.................... void    table_to_nokialcd(void); 
.................... void    nokia_putpixel(int8 xnokia,int8 ynokia); 
.................... void    nokia_write_data_inv(char bytefornokia_data_inv); 
.................... void    nokia_clear_screen(void); 
.................... void    nokia_clear_xy(int8 xnokia, int8 ynokia); 
.................... void    nokia_print_uparrow(void); 
.................... void    nokia_print_downarrow(void); 
.................... void    nokia_print_leftarrow(void); 
.................... void    nokia_print_rightarrow(void); 
.................... void    nokia_print_degree(void); 
.................... void    nokia_print_lowbatdegree(void); 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_init(void) 
.................... { 
....................   output_high(nok_dc);            // bytes are stored in the display data ram, address counter, incremented automatically 
*
025D:  BSF    03.5
025E:  BCF    06.7
025F:  BCF    03.5
0260:  BSF    06.7
....................   output_high(nok_cs);            // chip disabled 
0261:  BSF    03.5
0262:  BCF    06.0
0263:  BCF    03.5
0264:  BSF    06.0
....................   output_low(nok_res);            // reset chip during 250ms 
0265:  BSF    03.5
0266:  BCF    06.1
0267:  BCF    03.5
0268:  BCF    06.1
....................   delay_ms(10);         // works with less..... 
0269:  MOVLW  0A
026A:  MOVWF  27
....................   output_high(nok_res); 
*
027F:  BSF    03.5
0280:  BCF    06.1
0281:  BCF    03.5
0282:  BSF    06.1
....................  
....................   nokia_write_command(0x21);   // set extins extended instruction set 
0283:  MOVLW  21
0284:  MOVWF  2A
0285:  CALL   230
....................   nokia_write_command(0xc2);   // Vop  v1: 0xc8 (for 3V)// v2: 0xa0 (for 3V) // v3: 0xc2 (2v6-5v)   ******************************************************************************************************************** 
0286:  MOVLW  C2
0287:  MOVWF  2A
0288:  CALL   230
....................   nokia_write_command(0x13);   // bias 
0289:  MOVLW  13
028A:  MOVWF  2A
028B:  CALL   230
....................   nokia_write_command(0x20);   // horizontal mode from left to right, X axe are incremented automatically , 0x22 for vertical addressing ,back on normal instruction set too 
028C:  MOVLW  20
028D:  MOVWF  2A
028E:  CALL   230
....................   nokia_write_command(0x09);   // all on 
028F:  MOVLW  09
0290:  MOVWF  2A
0291:  CALL   230
....................  
....................   nokia_clean_ddram();      // reset DDRAM, otherwise the lcd is blurred with random pixels 
....................  
....................   nokia_write_command(0x08);   // mod control blank change (all off) 
*
02A6:  MOVLW  08
02A7:  MOVWF  2A
02A8:  CALL   230
....................   nokia_write_command(0x0c);   // mod control normal change 
02A9:  MOVLW  0C
02AA:  MOVWF  2A
02AB:  CALL   230
.................... } 
02AC:  GOTO   315 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_clean_ddram(void) 
.................... { 
....................   nokia_gotoxy(0,0);         // 84*6=504      clear LCD 
*
0292:  CLRF   27
0293:  CLRF   28
0294:  CALL   240
....................   for (ddram=504;ddram>0;ddram--){nokia_write_data(0x00);} 
0295:  MOVLW  01
0296:  MOVWF  25
0297:  MOVLW  F8
0298:  MOVWF  24
0299:  MOVF   24,F
029A:  BTFSS  03.2
029B:  GOTO   29F
029C:  MOVF   25,F
029D:  BTFSC  03.2
029E:  GOTO   2A6
029F:  CLRF   29
02A0:  CALL   24D
02A1:  MOVF   24,W
02A2:  BTFSC  03.2
02A3:  DECF   25,F
02A4:  DECF   24,F
02A5:  GOTO   299
.................... } 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_write_command(char bytefornokia_command) 
.................... { 
....................   output_low(nok_dc);   // byte is a command it is read with the eight SCLK pulse 
*
0230:  BSF    03.5
0231:  BCF    06.7
0232:  BCF    03.5
0233:  BCF    06.7
....................   output_low(nok_cs);   // chip enabled 
0234:  BSF    03.5
0235:  BCF    06.0
0236:  BCF    03.5
0237:  BCF    06.0
....................   nokia_write_dorc(bytefornokia_command); 
0238:  MOVF   2A,W
0239:  MOVWF  2B
023A:  CALL   211
....................   output_high(nok_cs);   // chip disabled 
023B:  BSF    03.5
023C:  BCF    06.0
023D:  BCF    03.5
023E:  BSF    06.0
....................  
.................... } 
023F:  RETURN
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_write_data(char bytefornokia_data) 
.................... { 
....................  
....................   output_high(nok_dc); 
*
024D:  BSF    03.5
024E:  BCF    06.7
024F:  BCF    03.5
0250:  BSF    06.7
....................   output_low(nok_cs);   // chip enabled 
0251:  BSF    03.5
0252:  BCF    06.0
0253:  BCF    03.5
0254:  BCF    06.0
....................   nokia_write_dorc(bytefornokia_data); 
0255:  MOVF   29,W
0256:  MOVWF  2B
0257:  CALL   211
....................   output_high(nok_cs);   // chip disabled 
0258:  BSF    03.5
0259:  BCF    06.0
025A:  BCF    03.5
025B:  BSF    06.0
....................  
.................... } 
025C:  RETURN
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_write_dorc(char bytefornokia)         // serial write data or command subroutine 
.................... { 
....................   char caa; 
....................   for (caa=8;caa>0;caa--) { 
*
0211:  MOVLW  08
0212:  MOVWF  2C
0213:  MOVF   2C,F
0214:  BTFSC  03.2
0215:  GOTO   22F
....................     output_low(nok_sclk); 
0216:  BSF    03.5
0217:  BCF    06.5
0218:  BCF    03.5
0219:  BCF    06.5
....................     // delay_us(2); 
....................     if ((bytefornokia&0x80)==0){output_low(nok_sda);} 
021A:  MOVF   2B,W
021B:  ANDLW  80
021C:  BTFSS  03.2
021D:  GOTO   223
021E:  BSF    03.5
021F:  BCF    06.6
0220:  BCF    03.5
0221:  BCF    06.6
....................     else {output_high(nok_sda);} 
0222:  GOTO   227
0223:  BSF    03.5
0224:  BCF    06.6
0225:  BCF    03.5
0226:  BSF    06.6
....................     output_high(nok_sclk); 
0227:  BSF    03.5
0228:  BCF    06.5
0229:  BCF    03.5
022A:  BSF    06.5
....................     bytefornokia=bytefornokia<<1; 
022B:  BCF    03.0
022C:  RLF    2B,F
....................   } 
022D:  DECF   2C,F
022E:  GOTO   213
.................... } 
022F:  RETURN
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_gotoxy(int8 xnokia, int8 ynokia)  // Nokia LCD 3310 Position cursor 
.................... { 
....................   nokia_write_command(0x40|(ynokia&0x07));   // Y axe initialisation: 0100 0yyy 
*
0240:  MOVF   28,W
0241:  ANDLW  07
0242:  IORLW  40
0243:  MOVWF  29
0244:  MOVWF  2A
0245:  CALL   230
....................   nokia_write_command(0x80|(xnokia&0x7f));   // X axe initialisation: 1xxx xxxx 
0246:  MOVF   27,W
0247:  ANDLW  7F
0248:  IORLW  80
0249:  MOVWF  29
024A:  MOVWF  2A
024B:  CALL   230
.................... } 
024C:  RETURN
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_erase_y(int8 ynokia) 
.................... { 
....................   nokia_gotoxy(0,ynokia); 
....................   printf(nokia_printchar,"              "); 
.................... } 
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_erase_x(int8 xnokia) 
.................... { 
....................   char column; 
....................   for (column=0;column!=6;column++){ 
....................     nokia_gotoxy(xnokia,column); 
....................     nokia_write_data(0x00); 
....................     nokia_write_data(0x00); 
....................     nokia_write_data(0x00); 
....................     nokia_write_data(0x00); 
....................     nokia_write_data(0x00); 
....................     nokia_write_data(0x00); 
....................   } 
.................... } 
.................... ////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_printchar(int8 cvar)               // Write 1 character to LCD 
.................... { 
....................   charsel=cvar; 
*
02D2:  MOVF   28,W
02D3:  MOVWF  21
....................   table_to_nokialcd(); 
.................... } 
*
030D:  RETURN
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... void table_to_nokialcd(void)   // extract ascii from tables & write to LCD 
.................... { 
....................   if (charsel<0x20)return; 
*
02D4:  MOVF   21,W
02D5:  SUBLW  1F
02D6:  BTFSC  03.0
02D7:  GOTO   30D
....................   if (charsel>0x7f)return; 
02D8:  MOVF   21,W
02D9:  SUBLW  7F
02DA:  BTFSS  03.0
02DB:  GOTO   30D
....................  
....................   for (char_row=0;char_row<5;char_row++) {      // 5 bytes 
02DC:  CLRF   20
02DD:  MOVF   20,W
02DE:  SUBLW  04
02DF:  BTFSS  03.0
02E0:  GOTO   30B
....................  
....................     if (charsel<0x50){ 
02E1:  MOVF   21,W
02E2:  SUBLW  4F
02E3:  BTFSS  03.0
02E4:  GOTO   2F4
....................       charpos=(((charsel&0xff)-0x20)*5); 
02E5:  MOVF   21,W
02E6:  ADDLW  E0
02E7:  MOVWF  2A
02E8:  MOVWF  2B
02E9:  MOVLW  05
02EA:  MOVWF  2C
02EB:  CALL   2AD
02EC:  MOVF   78,W
02ED:  MOVWF  22
....................       chardata=TABLE5[(charpos+char_row)]; 
02EE:  MOVF   20,W
02EF:  ADDWF  22,W
02F0:  CALL   004
02F1:  MOVWF  78
02F2:  MOVWF  23
....................     }            // use TABLE5 
....................     else if (charsel>0x4f){ 
02F3:  GOTO   306
02F4:  MOVF   21,W
02F5:  SUBLW  4F
02F6:  BTFSC  03.0
02F7:  GOTO   306
....................       charpos=(((charsel&0xff)-0x50)*5); 
02F8:  MOVF   21,W
02F9:  ADDLW  B0
02FA:  MOVWF  2A
02FB:  MOVWF  2B
02FC:  MOVLW  05
02FD:  MOVWF  2C
02FE:  CALL   2AD
02FF:  MOVF   78,W
0300:  MOVWF  22
....................       chardata=TABLE6[(charpos+char_row)]; 
0301:  MOVF   20,W
0302:  ADDWF  22,W
0303:  CALL   0F8
0304:  MOVWF  78
0305:  MOVWF  23
....................     }            // use TABLE6 
....................     nokia_write_data(chardata);      // send data to nokia 
0306:  MOVF   23,W
0307:  MOVWF  29
0308:  CALL   24D
....................   } 
0309:  INCF   20,F
030A:  GOTO   2DD
....................   nokia_write_data(0x00);      //    1 byte (always blank) 
030B:  CLRF   29
030C:  CALL   24D
.................... } 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_putpixel(int8 xnokia,int8 ynokia) 
.................... { 
....................    int line_y, plot_value; 
....................    byte byte_plot; 
....................    if((xnokia > 83)||(ynokia > 47)) 
....................       return; 
....................    line_y = (ynokia / 8); 
....................    plot_value = 0; 
....................    plot_value |= 1; 
....................    byte_plot = (plot_value<<(8-(ynokia%8)-1)); 
....................    nokia_gotoxy(xnokia,line_y); 
....................    nokia_write_data_inv(byte_plot); 
.................... } 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_write_data_inv(char bytefornokia_data_inv) 
.................... { 
....................   char caa; 
....................   output_high(nok_dc); 
....................   output_low(nok_cs);   // chip enabled 
....................  
....................   for (caa=8;caa>0;caa--) { 
....................     output_low(nok_sclk); 
....................     delay_us(2); 
....................     if ((bytefornokia_data_inv&0x01)==0){output_low(nok_sda);} 
....................     else {output_high(nok_sda);} 
....................     output_high(nok_sclk); 
....................     bytefornokia_data_inv=bytefornokia_data_inv>>1; 
....................   } 
....................   output_high(nok_cs);   // chip disabled 
.................... } 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_clear_screen(void) 
.................... { 
....................   nokia_erase_y(0); 
....................   nokia_erase_y(1); 
....................   nokia_erase_y(2); 
....................   nokia_erase_y(3); 
....................   nokia_erase_y(4); 
....................   nokia_erase_y(5); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void nokia_clear_xy(int8 xnokia, int8 ynokia) 
.................... { 
....................   nokia_gotoxy(xnokia,ynokia); 
....................   nokia_printchar(" "); 
.................... } 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... void nokia_print_uparrow(void) 
.................... { 
....................   nokia_write_data(0x04); 
....................   nokia_write_data(0x02); 
....................   nokia_write_data(0x7f); 
....................   nokia_write_data(0x02); 
....................   nokia_write_data(0x04); 
....................   nokia_write_data(0x00); 
.................... } 
.................... // 
.................... void nokia_print_downarrow(void) 
.................... { 
....................   nokia_write_data(0x10); 
....................   nokia_write_data(0x20); 
....................   nokia_write_data(0x7f); 
....................   nokia_write_data(0x20); 
....................   nokia_write_data(0x10); 
....................   nokia_write_data(0x00); 
.................... } 
.................... // 
.................... void nokia_print_leftarrow(void) 
.................... { 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0x1c); 
....................   nokia_write_data(0x2a); 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0xf8); 
.................... } 
.................... // 
.................... void nokia_print_rightarrow(void) 
.................... { 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0x2a); 
....................   nokia_write_data(0x1c); 
....................   nokia_write_data(0x08); 
....................   nokia_write_data(0x00); 
.................... } 
.................... // 
.................... void nokia_print_degree(void) 
.................... { 
....................   nokia_write_data(0x00); 
....................   nokia_write_data(0x06); 
....................   nokia_write_data(0x09); 
....................   nokia_write_data(0x09); 
....................   nokia_write_data(0x06); 
....................   nokia_write_data(0x00); 
....................   // nokia_printchar("  "); 
.................... } 
.................... // 
.................... void nokia_print_lowbatdegree(void) 
.................... { 
....................   nokia_write_data(0x00); 
....................   nokia_write_data(0x06); 
....................   nokia_write_data(0x0f); 
....................   nokia_write_data(0x0f); 
....................   nokia_write_data(0x06); 
....................   nokia_write_data(0x00); 
....................   // nokia_printchar("  "); 
.................... } 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
....................  
.................... //#include <math.h> 
....................  
.................... void main(void) 
.................... { 
*
030E:  CLRF   04
030F:  BCF    03.7
0310:  MOVLW  1F
0311:  ANDWF  03,F
0312:  MOVLW  07
0313:  MOVWF  1F
....................    int8 k; 
....................    nokia_init(); 
0314:  GOTO   25D
....................    printf(nokia_printchar, "Teste LCD"); 
0315:  CLRF   27
0316:  MOVF   27,W
0317:  CALL   1F2
0318:  INCF   27,F
0319:  MOVWF  77
031A:  MOVWF  28
031B:  CALL   2D2
031C:  MOVLW  09
031D:  SUBWF  27,W
031E:  BTFSS  03.2
031F:  GOTO   316
....................    nokia_gotoxy(0, 1);    
0320:  CLRF   27
0321:  MOVLW  01
0322:  MOVWF  28
0323:  CALL   240
....................    printf(nokia_printchar, "Marlon teste");    
0324:  CLRF   27
0325:  MOVF   27,W
0326:  CALL   200
0327:  INCF   27,F
0328:  MOVWF  77
0329:  MOVWF  28
032A:  CALL   2D2
032B:  MOVLW  0C
032C:  SUBWF  27,W
032D:  BTFSS  03.2
032E:  GOTO   325
....................    while(true){}; 
032F:  GOTO   32F
.................... } 
0330:  SLEEP

Configuration Fuses:
   Word  1: 3F21   NOWDT PUT XT MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
